operation Component cloneOwnedOperationFrom(componentSource : Component){
	for(op in componentSource.ownedOperation){
		op.cloneOperationInto(self);
	}
}

operation Component moveOperation( op : Operation ) : Boolean{
	if(self.ownedOperation.add(op)){
		return true;
	}
	return false;
}

operation Component cloneInterfaceRealizationFrom(component : Component) {
	for(realization in component.interfaceRealization){
		self.interfaceRealization.add(realization.cloneInterfaceRealization());
	}
}

operation Component cloneProvidedsFrom(component : Component){
	for(providedInterface in component.getProvideds()){
		self.getProvideds().add(providedInterface);
	}
}

operation Component cloneRequiredsFrom(component : Component ){
	for(requiredInterface in component.getRequireds()){
		self.getRequireds().add(requiredInterface);
	}
}

operation Component getLifelines() : List(Lifeline){
	var returnValue : List(Lifeline) = new List (Lifeline);
	for(lifeline in Lifeline.allInstances){
		if(lifeline.getInteraction().isDefined() and lifeline.getRepresents().getType() == self){
			returnValue.add(lifeline);
		}
	}
	return returnValue;
}

operation Component moveInterfaceRealizations(interfaceRealization : InterfaceRealization){
	self.interfaceRealization.add(interfaceRealization);
}


operation Component getAllUsedIntefacesProvidedsBy (op : Operation) : List(Interface){
	var returnValue : List(Interface) = new List(Interface);
	
	var listOfUsage = op.getNearestPackage().getUsageRelations();
	
	for (proInterface in self.getProvidedInterfaces() ){
		for(usage in listOfUsage){
			if(usage.supplier->first() == op){
				for(iOp in proInterface.getOwnedOperations()){
					if(usage.client->first() == iOp){
						returnValue.add(proInterface);
						break;
					}
				}
			}
		}
	}
	
	//le sole interfacce utilizzate dall'operzione critica
	for(proInterface in returnValue){
		for(usage in listOfUsage){
			if(usage.supplier->first() <> self and usage.client->first == proInterface){
				returnValue.remove(proInterface);
			}
		}
	}
	
	return returnValue;
}

//recupero la lista delle interfacce richieste
operation Component getAllUsedIntefacesRequiredsBy ( op : Operation ) : List(Interface){
	var returnValue : List(Interface) = new List(Interface);
	var listOfUsage = self.getUsageRelations();
	var listOfRequireds = self.getRequireds();
	for (reqInterface in listOfRequireds){
		for(usage in self.getNearestPackage().getUsageRelations()){
			//TODO
		}
	}
	return returnValue;
}

//recupero la lista di usage proprie del componente
operation Component getUsageRelations() : List(Usage){
	var returnValue : List(Usage) = new List(Usage);
	
	for(relation in Usage.allInstances){
		if( relation.isTypeOf(Usage) and relation.owner == self){
			returnValue.add(relation);
		}
	}
	return returnValue;
}

//recupero la lista degli artifact che manifestano il componente
operation Component getAllArtifacts() : Sequence(Artifact){
	var returnValue : Sequence(Artifact) = new Sequence(Artifact);
	for(manifestation in Manifestation.allInstances){
		if(manifestation.hasUtilizedElement(self)){
			returnValue.addAll(manifestation.client);
		}
	}
	return returnValue;
	
}

//recupero tutte le properties relative al componente negli interaction
operation Component getAllInteractionProperties() : List(Property){
	var returnValue : List(Lifeline) = new List(Lifelinei);
	
	for(interaction in Interaction.allInstances){
		for(prop in interaction.ownedAttribute){
			if(prop.getType() == self){
				returnValue.add(prop);
			}
		}
	}
	
	return returnValue;
}

/*
operation Component getLifeline(interaction : Interaction) : Lifeline{
	for(lf in interaction.getLifelines()){
		if(lf.represents.type == self){
			return lf; //L1
		}	
	}
}
*/

operation Component getLifeline(interaction : Interaction) : Lifeline{
	for(lf in Lifeline.allInstances){
		if(lf.getOwner() == interaction){ 
			if(lf.getRepresents().getType() == self){
				return lf; //L1
			}
		}	
	}
	return null;
}

operation Component getManifestations() : List(Manifestation){
	var returnValue : List(Manifestation) = new List(Manifestation);
	for(manifestation in Manifestation.allInstances){
		if(manifestation.getUtilizedElement == self){
			returnValue.add(manifestation);
		}
	}
	return returnValue;
}

operation Component getNodes() : List(Node){
	var returnValue : List(Node) = new List(Node);
	for (artifact in self.getAllArtifacts()){
		for(node in Node.allInstances){
			if( node.hasDeployment(artifact) ){
				returnValue.add(node);
			}
		}
	}
	return returnValue;
}

operation Component moveInterfacesRealizationFrom(component : Component, op : Operation) {
	
	var listOfUsedProvidedInterfaces : List(Interface) = component.getAllUsedIntefacesProvidedsBy(op);
		
	//sposto le interface realization delle interfacce della listOfUsedProvidedInterfaces 
	//nel nuovo componente
	var selfComponentListOfInterfaceRealizations : List(Interface) = component.getInterfaceRealizations();
	
	for(intRealization in selfComponentListOfInterfaceRealizations){
		for(interface in listOfUsedProvidedInterfaces){
			if(interface == intRealization.getContract() ){
				self.moveInterfaceRealizations(intRealization);
			}
		}
	}
}

operation Component getOperations() : Sequence(Operation){
	return self.getOwnedOperations().asSequence();
}

operation Component deployOnNewNodes(component : Component) {
	
	var listOfNode : List(Node) = component.getNodes();
	
	for(node in listOfNode){
		node.clone(self);		
	}
}

operation Component getNearLessUsedNodes() : List(Node){
	
	var listOfNode = self.getNodes();
	var listOfNearLessUsed : List(Node) = new List(Node);
	
	for(node in listOfNode){
		var listOfNearNode = node.getDirectlyLinkedNode();
		var lessNode : Node = listOfNode->first(); 
		var utilization = lessNode.getValue(lessNode.getStereotype("GaExecHost"), "utilization")->first();
		if(utilization.isUndefined()) utilization = 0.0; //utilizzazione minima
		var i : Integer = 0;
		for(nearNode in listOfNearNode){
			
			var stereotype = listOfNode->first().getStereotype("GaExecHost");
			
			if( nearNode.hasStereotype("GaExecHost") ){
				var nearNodeUtilization = nearNode.getValue(stereotype, "utilization")->first();
				if(nearNodeUtilization.isDefined() and nearNodeUtilization.asReal() < utilization){
					lessNode = nearNode;	
					utilization = nearNodeUtilization;
				}
			}
			i = i+1;
		}
		listOfNearLessUsed.add(lessNode);
	}
	return listOfNearLessUsed;
}

operation Component deployOn(node : Node){
	var newArtifact : Artifact = new Artifact;
	var newManifestation; 
	var newDeployment; 
	
	node.getNearestPackage().addElement(newArtifact); 
	newArtifact.name = self.name; 
	
	newManifestation = newArtifact.createManifestation(self.name, self); 
	newDeployment = node.createDeployment(newArtifact.name); 
	newDeployment.getDeployedArtifacts().add(newArtifact);
}

operation Component getNeighbours() : List(Node){
	var listOfNode : List(Node) = new List(Node);
	
	for(node in self.getNodes()){
		var nodeOwnedLink = node.getDirectlyLinkedNode();
		if(nodeOwnedLink.isDefined() and nodeOwnedLink.size() > 0 ){
			listOfNode.addAll(nodeOwnedLink);
		}
	}
	return listOfNode;
}

operation Component redeployOn(node : Node, from : Node){
	var artifact = self.getArtifactOn(from);
	var deployment = self.getDeploymentOn(from, artifact);
	node.getDeployments().add(deployment);
}

operation Component getArtifactOn(node : Node) : Artifact{
	var deploymentNode: Node; 
	for (art in self.getAllArtifacts()){
		deploymentNode = art.getDeploymentNode();
		if(deploymentNode.isDefined() and deploymentNode == node){
			return art;
		}
	}
	return null;
}

operation Component calculateUtilization() : Sequence(Real){
	var ownOperations = self.getOperations();
	var utilization : Sequence(Real) = new Sequence(Real);
	
	for(op in ownOperations){
		if(op.hasStereotype("GaStep") and op.getValue(op.getStereotype("GaStep"), "servCount").isDefined()){
			var sCount = op.getValue(op.getStereotype("GaStep"), "servCount");
			for(sc in sCount){
				utilization.add(0.0);
			}
			if(not sCount.isEmpty()){
				var i : Integer = 0;
				for(sc in sCount){
					utilization.add(utilization.at(i).asReal() + sCount.at(i).asReal());
					utilization.removeAt(i);
					i = i+1;
				}
			}
		}
	}
	return utilization;
}

operation Component calculateTotalUtilization() : Real{
	var totUtilization : Real = 0.0;
	var i : Integer = 0;
	for (utl in self.calculateUtilization()){
		totUtilization = totUtilization + utl;
		i = i + 1;
	}
	return (totUtilization / i.asReal());
}

operation Component addUsages(usages : Sequence(Usage)){
	for(usage in usages){
		if(usage.isTypeOf(InterfaceRealization)){
			self.moveInterfaceRealizations(usage);
		}
		//else if(usage.isTypeOf(InterfaceRealization)){}
	}
}

operation Component getDeploymentOn(node : Node, art : Artifact) : Deployment{
	var returnValue = Deployment.allInstances->selectOne(
		deployment : Deployment | deployment.client->exists(targetNode : Node | targetNode == node) and deployment.supplier->exists(
			deployedArtifact : Artifact | deployedArtifact == art
		)
	);
	return returnValue;
}

operation Component createLifelineInto(interaction : Interaction) : Lifeline {
	var lifeline = interaction.createLifeline(self.name+"lifeline"); //L2
	var spProp = interaction.createOwnedAttribute(self.name, self);
	
	lifeline.setRepresents(spProp);
	return lifeline;
}

operation Component getCriticalOperation() : Operation{

	var operations = self.getOwnedOperations();
	var criticalOperation : Operation;
	var utilization : Real;
	
	if(operations.isUndefined() or operations.isEmpty()){
		"[getCriticalOperations() in operation.eol]".errln("There was an error!!! ");
		return false;
	}
	
	criticalOperation = operations->first();
	utilization = criticalOperation.calculateTotalUtilization();
	
	for (op in operations){
		if(utilization > op.calculateTotalUtilization()){
			utilization = op.calculateTotalUtilization();
			criticalOperation = op;
		}
	}
	return criticalOperation;
}

operation Component getSendingMessages() : Integer{
	var lifelines = self.getLifelines();
	
	for(lf in lifelines){
		var outgoingMessages = lf.getOutgoingMessages();
	}
}

operation Component getCriticalMessages4BlobControllerAP(th_maxMsgs : Integer) : Map {
	var lifelines = self.getLifelines();
	var lfMap : Map(Lifeline, BehaviorExecutionSpecificaiton) = new Map(Lifeline, BehaviorExecutionSpecification);
	var count : Integer = 0;
	
	for(lf in lifelines){
		var beses = lf.getBESes();
		count = 0;
		for(bes in beses){
			var besOwner = bes.getOwner();
			var besStartIndex = besOwner.getIndexOf(bes.getStart()); //indice di inizio bes
			var besFinishIndex = besOwner.getIndexOf(bes.getFinish()); //indice di fine bes
			
			for(intFrag in lf.getCoveredBys()){
				if(intFrag.getOwner().getIndexOf(intFrag) > besStartIndex and intFrag.getOwner().getIndexOf(intFrag) <= besFinishIndex){
					if(intFrag.isTypeOf(MessageOccurrenceSpecification)){
						for( mes in lf.getInteraction().getMessages()){
							if(not mes.getMessageSort().asString().equals("reply") and mes.getSendEvent() == intFrag){
								count = count + 1;
							}
						}
					}
					
				}
			}
			if(count > th_maxMsgs){
				lfMap.put(lf, bes);
			}
		} 
	} 
	
	return lfMap;
}

operation Component getCriticalOperations4BlobControllerAP(th_maxMsgs : Integer) : Sequence(Operation){
	var returnValue : Sequence(Operation) = new Sequence(Operation);
	
	for(msg in self.getCriticalMessages4BlobControllerAP(th_maxMsgs)){
		returnValue.add(msg.getSignature());
	}
	return returnValue;
}

operation Component getCriticalLifeline4BlobContainerAP(th_maxMsgs : Integer) : Sequence(Lifeline){
	var returnValue : Sequence(Lifeline) = new Sequence(Lifeline);
	var lifelines = self.getLifelines();
	for(lf in lifelines){
		var beses = lf.getBESes();
		if(beses.size() >= th_maxMsgs){
			returnValue.add(lf);
		}
	}
	return returnValue;
}

operation Component getNodesWithUtilizationGreaterThan(th_maxHwUtil : Real) : Sequence(Node){
	return self.getNodes()->select(n : Node | n.getUtilization() >= th_maxHwUtil);
}

operation Component getNodesWithNetworkUsageGreaterThan(th_maxNetUtil : Real) : Sequence(Node){
	var returnValue : Sequence(Node) = new Sequence(Node);
	
	for (node in self.getNodes()){
		var commPaths = node.getNetworkUsage().keySet();
		for(cp in commPaths){
			if(node.getNetworkUsage().get(cp)->exists(iterator | iterator.asReal() >= th_maxNetUtil))
				returnValue.add(node);
		}
	}
	return returnValue;
}

operation Component getNodesWithNetworkUsageLesserThan(th_minNetUtil : Real) : Sequence(Node){
	var returnValue : Sequence(Node) = new Sequence(Node);
	
	for (node in self.getNodes()){
		if(not node.getNetworkUsage().isEmpty()){
			var commPaths = node.getNetworkUsage().keySet();
			for(cp in commPaths){
				if(node.getNetworkUsage().get(cp)->exists(iterator | iterator.asReal() < th_minNetUtil)){
					returnValue.add(node);
				}
					
			}
		}
	}
	return returnValue;
}

operation Component getOperationsWithResDemandGreaterOrEqual(th_maxResDemand : List(Real) ) : List(Operation){
	var listOfOperations = self.getOperations();
	var returnValue : List(Operation) = new List(Operation);
	
	for(op in listOfOperations){
	
		if(op.hasStereotype('GaStep')){
			if(op.F_resDemandGreaterOrEqualThan(th_maxResDemand) ){
				returnValue.add(op);
			}
		}
	}
	return returnValue;
}

operation Component getOperationsWithResDemandLesserThan(th_minResDemand : List(Real) ) : List(Operation){
	var listOfOperations = self.getOperations();
	var returnValue : List(Operation) = new List(Operation);
	for(op in listOfOperations){
		if(op.hasStereotype('GaStep')){
			if(op.F_resDemandLesserThan(th_minResDemand) ){
				returnValue.add(op);
			}
		}
	}
	return returnValue;
}

operation Component getRequiredInterfaces() : Sequence(Interface){
	return self.getRequireds().asSequence();
}

operation Component getInteractions() : Sequence(Interaction){
	var returnValue : Sequence(Interaction) = new Sequence(Interaction);
	for(lf in self.getLifelines()){
		returnValue.add(lf.getInteraction());
	}
	return returnValue;
}

operation Component isRemote(component : Component) : Boolean{
	for (node in self.getNodes()){
		for(n in component.getNodes()){
			if(n.isReachableByNetwork() and node.isReachableByNetwork() and n <> node){ //se n e node sono raggiungibili in rete e sono due nodi differenti
				return true;
			}
		}
	}
	return false;
}

operation Component countRemoteMessages(th_maxRemMsgs : Integer) : Boolean{
	var map = self.getRemoteMesIntoInteractions();
	for(ks in map.keySet()){
		if(map.get(ks).size() >= th_maxRemMsgs) //numero di messaggi remoti in un interaction
			return true;
	}
	return false;
}

operation Component getRemoteMesIntoInteractions() : Map{	
	var returnMap : Map(Interaction, Sequence(Message)) = new Map(Interaction, Sequence(Message));
	
	var seqMes : Sequence(Message) = new Sequence(Message);
	
	var selfInteractions = self.getInteractions();
	for(int in selfInteractions){
		var seqOfMes = int.getMessageOf(self);
		for(mes in seqOfMes){
			if(not mes.isReturn()){
				var lf = mes.getReceiveLifeline(); //lifeline destinataria
				var component = lf.getRepresents().getType(); //componente
				if(component.isTypeOf(Component) and component.isRemote(self) ){ // i due componenti sono remoti
					seqMes.add(mes);
				}
			} 
		}
		if(not seqMes.isEmpty() ){
			returnMap.put(int, seqMes.clone());
			seqMes.clear();
		}
	}
	return returnMap;
}

operation Component countRemoteInstances(th_maxRemInst : Integer) : Boolean{
	var map = self.getRemoteMesIntoInteractions();
	var seqLf : Sequence(Lifeline) = new Sequence(Lifeline);
	for(ks in map.keySet()){
		for(mes in map.get(ks)){
			if(not mes.isReturn() and mes.getReceiveLifeline().isDefined() and 
				not seqLf.contains(mes.getReceiveLifeline())){
				seqLf.add(mes.getReceiveLifeline());
			} 
		}
		
		if(seqLf.size() >= th_maxRemInst){
			return true;
		}
		seqLf.clear();
	}
	return false;
}

operation Component applySessionFacade() : Boolean{
	var mapIntMes = self.getRemoteMesIntoInteractions();
	var mapRemCompFacade : Map(Component, List(Component)) = new Map(Component, List(Component));

	for(int in mapIntMes.keySet()){
		for(mes in mapIntMes.get(int)){
			if(mes.hasStereotype("GaCommStep")){
				var op = mes.getSignature(); 
				var comp = op.getClass_(); 
				if(mapRemCompFacade.keySet().isEmpty() or not mapRemCompFacade.containsKey(comp)){
					var listOfComponent : Sequence(Component) = new Sequence(Component);
					var localFacade : Component = self.createNewComponent();
					var remoteFacade : Component = comp.createNewComponent();
					var opRemoteFacadeInterface : Interface = new Interface();
					
					localFacade.setName("LocalFacadeWith_"+comp.getName()); 
					remoteFacade.setName("RemoteFacadeWith_"+self.getName());
					remoteFacade.getNearestPackage().addElement(opRemoteFacadeInterface);
					remoteFacade.getProvideds().add(opRemoteFacadeInterface);
					opRemoteFacadeInterface.setName("opFacade_Interface");
					localFacade.getRequireds().add(opRemoteFacadeInterface);
					localFacade.getProvideds().add(opRemoteFacadeInterface);
					listOfComponent.add(localFacade);
					listOfComponent.add(remoteFacade);

					for(node in self.getNodes()){
						localFacade.deployOn(node);
					}
					for(node in comp.getNodes()){
						remoteFacade.deployOn(node);
					}
					var localFacadeLf = int.createLifelineOf(localFacade);
					var remoteFacadeLf = int.createLifelineOf(remoteFacade);
					
					listOfComponent.add(localFacadeLf);
					listOfComponent.add(remoteFacadeLf);
					
					mapRemCompFacade.put(comp, listOfComponent);
				}
				var localFacade = mapRemCompFacade.get(comp).first();
				var remoteFacade = mapRemCompFacade.get(comp).second();
				
				var listOfUsedInterface = op.getUsedInterfaces(); //interfacce usate da op

				for(interface in listOfUsedInterface){
					localFacade.allRealizedInterfaces().add(interface);
					remoteFacade.getAllUsedInterfaces().add(interface);
				}
					
				var localFacadeLf = mapRemCompFacade.get(comp).third();
				var remoteFacadeLf = mapRemCompFacade.get(comp).fourth();
				var besLf : BehaviorExecutionSpecification = new BehaviorExecutionSpecification;
				var messageEnd : ExecutionOccurrenceSpecification = new ExecutionOccurrenceSpecification;

				int.getFragments().add(besLf);
				besLf.setName("BesLifeline");
				int.getFragments().add(messageEnd);
				messageEnd.setName(mes.getName()+"_End");
				
				var mesSelf2Lf = int.createMessage(mes.getName());
				var sendMOS : MessageOccurrenceSpecification = new MessageOccurrenceSpecification;
				var receiveMOS : MessageOccurrenceSpecification = new MessageOccurrenceSpecification;

				int.getFragments().add(sendMOS);
				int.getFragments().add(receiveMOS);
				mesSelf2Lf.setSendEvent(sendMOS);
				mesSelf2Lf.setReceiveEvent(receiveMOS);
				besLf.start = mesSelf2Lf.getSendEvent();
				besLf.finish = messageEnd;
				localFacadeLf.getCoveredBys().add(besLf);
				localFacadeLf.getCoveredBys().add(mesSelf2Lf.getReceiveEvent());
				int.getComponentLifeline(self).getCoveredBys().add(mesSelf2Lf.getSendEvent());
				remoteFacadeLf.getCoveredBys().add(mes.getSendEvent());
				int.getComponentLifeline(self).removeInteractionFragment(mes.getSendEvent());
			}
		}
	}	
	return false;
}

operation Component addInterfaceRealization(int : InterfaceRealization) : Boolean {
	var selfPackage = self.getNearestPackage();
	var newInt : InterfaceRealization = int.cloneInterfaceRealization();
	
	selfPackage.addElement(newInt);
	if(self.getInterfaceRealization().add(newInt))
		return true;
	return false;
} 

operation Component createNewComponent() : Component{
	var selfPackage = self.getNearestPackage(); //recupero il package contenitore dell'operazione critica
	var component : Component = new Component; //creo il componente splittato

	selfPackage.addElement(component); //aggiungo il componente splittato al package del componente sorgente
	return component;
}


operation Component applyStandardFormat() : Boolean{
	var mostUsedFormat = self.getTheMostUsedFormat(); //mappa(interaction, map(formato, utilizzo))
	
	for(int in mostUsedFormat.keySet()){
		var stdFormat = mostUsedFormat.get(int).keySet()->first();
		for(mes in int.getMessageOf(self)){
			if(mes.hasStereotype("GaEventTrace") and mes.getValue(mes.getStereotype("GaEventTrace"), "format").isDefined())
				mes.setValue(mes.getStereotype("GaEventTrace"), "format", stdFormat.asString());
		}
	}
	return false;
}

operation Component getUsedFormat() : Any{
	var listOfInteraction = self.getInteractions();
	var mapFormatTypeUsage : Map(String, Integer) = new Map(String, Integer);
	var mapUsedFormat : Map(Interaction, Map);
	
	for(int in listOfInteraction){
		var listOfMes = int.getMessageOf(self);
		for(mes in listOfMes){
			if(mes.hasStereotype("GaEventTrace") and mes.getValue(mes.getStereotype("GaEventTrace"), "format").isDefined() ){
				if( mapFormatTypeUsage.isEmpty() or 
						not mapFormatTypeUsage.containsKey(mes.getValue(mes.getStereotype("GaEventTrace"), "format"))){
							mapFormatTypeUsage.put(mes.getValue(mes.getStereotype("GaEventTrace"), "format"), 1);
				}
				else if(mapFormatTypeUsage.containsKey(mes.getValue(mes.getStereotype("GaEventTrace"), "format"))){
					var count = mapFormatTypeUsage.get(mes.getValue(mes.getStereotype("GaEventTrace"), "format")).asInteger() + 1;
					mapFormatTypeUsage.put(mes.getValue(mes.getStereotype("GaEventTrace"), "format"), count);
				}
			}
		}
		if(not mapFormatTypeUsage.isEmpty())
			mapUsedFormat.put(int, mapFormatTypeUsage);
	}
	return mapUsedFormat;
}

operation Component getTheMostUsedFormat() : Any{
	var listOfInteraction = self.getInteractions();
	var mapMostUsedFormat : Map(Interaction, Map);
	
	for(int in self.getUsedFormat().keySet()){
		mapMostUsedFormat.put(int, self.getUsedFormat().get(int).getMostUsed());
	}
	return mapMostUsedFormat;
}

operation Map getMostUsed() : Map {
	var max = 0;
	var mapFormat : Map(String, Integer);
	var maxFormat : String;

	for(format in self.keySet()){
		if(self.get(format).asInteger() > max){
			max = self.get(format).asInteger();
			maxFormat = format;
		}
	}
	mapFormat.put(maxFormat, max);
	return mapFormat;
}

operation Component reduceNumberOfSupplierConnects() : Boolean{
	var listOfOperations = self.getOperations();
	
	while(self.getOperations().size() > th_maxConnects){
		for(op in listOfOperations){
			var listOfUsedInterface = op.getOfUsedInterface();
			for(interface in listOfUsedInterface){
				var targetComponent = interface.getTargets()->first().getOwner();
				targetComponent.moveInto(op);
			}
		}
	}
}

operation Component reduceNumberOfClientConnects() : Boolean{
	var listOfUsedInterfaces = self.getRequireds();
	
	while(self.getRequireds().size > th_maxConnects){
		for(usedInt in listOfUsedInterfaces){
			var opOfUsedInt = usedInt.getOperation();
			self.moveInto(opOfUsedInt);
		}
	}
}

operation Component createNewInterfaceRealization() :InterfaceRealization{
	var newInt : InterfaceRealization = new  InterfaceRealization();
	var selfPackage = self.getNearestPackage();
	
	selfPackage.addElement(newInt);	
	self.getInterfaceRealization().add(newInt);
	return newInt;
}

operation Component createNewOperation(op : Operation) : Operation{
	var newOperation = self.createOwnedOperation("operation_decomposition", null,null);
	var interface_op_new = self.createInterfaceRealization("Interface_for_"+newOperation.getName(), null);
	
	newOperation.cloneAppliedStereotypesFrom(op);
	newOperation.cloneReturnTypeFrom(op);
	return newOperation;
}

operation Component deleteOperation(op : Operation) : Boolean{
	if(not self.getOperations()->exists(o | o == op)){
		"there was an error!!!".errln("[[ Method: deleteOperation(Operation) in component.eol ]]");
		return false;
	}
	op.destroy();
	return true;
}

operation Component moveToNewComponentDeployedOnNewNode(){
	var criticalOperation = self.getCriticalOperation();
	criticalOperation.moveToNewComponentDeployedOnNewNode();
}

operation Component moveToNewComponentDeployedOnNearLessUsedNode(){
	self.getCriticalOperation().moveToNewComponentDeployedOnNearLessUsedNode();
}

operation Component redeployOnNearLessUsedNode() {
	self.getCriticalOperation().redeployOnNearLessUsedNode();
}

operation Component moveToLessCriticalComponent(){
	self.getCriticalOperation().redeployOnNearLessUsedNode();
}